services:
  gitlab:
    image: 'gitlab/gitlab-ce:latest'
    container_name: gitlab
    restart: always
    hostname: '${GITLAB_HOSTNAME}'

    environment:
      GITLAB_OMNIBUS_CONFIG: |
        # Tell GitLab its external URL. IMPORTANT: Use https://
        external_url 'https://${GITLAB_HOSTNAME}'

        # Disable GitLab's internal Nginx from handling HTTPS, as Traefik will do it.
        nginx['enable'] = true
        nginx['listen_port'] = 80
        nginx['listen_https'] = false

        # Set headers to let GitLab know it's behind a proxy.
        nginx['proxy_set_headers'] = {
          'X-Forwarded-Proto' => 'https',
          'X-Forwarded-Ssl' => 'on'
        }

        # Configure the SSH port GitLab listens on.
        gitlab_shell['ssh_port'] = ${GITLAB_SSH_PORT}
        gitlab_rails['time_zone'] = '${GITLAB_TIMEZONE}'

    ports:
      # Expose only the SSH port directly. Traefik handles HTTP/S.
      - '${GITLAB_SSH_PORT}:22'

    volumes:
      # Use bind mounts to store data in local folders for easy backup.
      - '${GITLAB_CONFIG_DIR}:/etc/gitlab'
      - '${GITLAB_LOGS_DIR}:/var/log/gitlab'
      - '${GITLAB_DATA_DIR}:/var/opt/gitlab'

    labels:
      # --- Traefik Labels ---
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-proxy" # Specify the Traefik network

      # HTTPS Router
      - "traefik.http.routers.gitlab.rule=Host(`${GITLAB_HOSTNAME}`)"
      - "traefik.http.routers.gitlab.entrypoints=websecure"
      - "traefik.http.routers.gitlab.service=gitlab"
      - "traefik.http.routers.gitlab.tls=true"
      - "traefik.http.routers.gitlab.tls.certresolver=cloudflare"

      # HTTP to HTTPS Redirect Middleware
      - "traefik.http.routers.gitlab-http.rule=Host(`${GITLAB_HOSTNAME}`)"
      - "traefik.http.routers.gitlab-http.entrypoints=web"
      - "traefik.http.routers.gitlab-http.middlewares=https-redirect@docker"

      # Service definition for Traefik
      - "traefik.http.services.gitlab.loadbalancer.server.port=80"

    networks:
      # Connect to the external Traefik network and our new internal network.
      - traefik-proxy
      - gitlab-net

    shm_size: '256m'

  # --- New GitLab Runner Service ---
  gitlab-runner:
    image: 'gitlab/gitlab-runner:latest'
    container_name: gitlab-runner
    restart: always
    depends_on:
      - gitlab # Ensures GitLab starts first
    volumes:
      # Volume to persist runner registration & configuration
      - '${GITLAB_RUNNER_CONFIG_DIR}:/etc/gitlab-runner'
      # Mount the Docker socket to allow the runner to start sibling containers for jobs
      - '/var/run/docker.sock:/var/run/docker.sock'
    networks:
      # Connect to the internal network to communicate with the gitlab service
      - gitlab-net

networks:
  # Define the external Traefik network
  traefik-proxy:
    external: true
  # Define the new internal network for GitLab and Runner communication
  gitlab-net:
    driver: bridge
